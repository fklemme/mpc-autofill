# This script configures a multi-container setup to serve MPCAutofill and all
# its dependencies. Simply navigate to the base directory and run
# "docker-compose up" to get started. Optionally, you can pass "-d" to detach
# all containers and their outputs to the background. By default, MPCAutofill
# is served at http://localhost:8000. You can adjust the port and other options
# in 'docker/.env'. Many code templates and inspirations are taken from blog post
# https://testdriven.io/blog/dockerizing-django-with-postgres-gunicorn-and-nginx/

version: '3.4'

services:
  # Postgres database for Django
  postgres:
    image: postgres:13.0-alpine
    environment:
      - POSTGRES_DB=mpcautofill
      - POSTGRES_USER=mpcautofill
      - POSTGRES_PASSWORD=mpcautofill
    expose:
      - 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Elasticsearch used by MPCAutofill
  elasticsearch:
    image: elasticsearch:7.14.1
    environment:
      - discovery.type=single-node
      - logger.level=WARN
    expose:
      - 9200
    volumes:
      - elaticsearch_data:/usr/share/elasticsearch/data

  # Unicorn serving Django
  django:
    image: mpcautofill_django
    build:
      context: ..
      dockerfile: ./docker/django/Dockerfile
    expose:
      - 8000
    volumes:
      # Django writes to
      - django_static:/MPCAutofill/static
    tmpfs:
      # Orders are stored non-persistently
      - /mpc_orders
    depends_on:
      - postgres
      - elasticsearch

  # Nginx serving Django's static files
  nginx:
    image: mpcautofill_nginx
    build:
      context: ..
      dockerfile: ./docker/nginx/Dockerfile
    ports:
      - ${MPCAUTOFILL_HTTP_PORT:-8000}:80
    volumes:
      # Nginx reads from
      - django_static:/MPCAutofill/static
    depends_on:
      - django

  # Running the autofill client
  autofill:
    build:
      context: ..
      dockerfile: ./docker/autofill/Dockerfile
    environment:
      - DISPLAY
    # By using the host's network stack, Chrome can talk directly
    # to the host's X11 server. (Linux only, unfortunately)
    network_mode: "host"

# Persistent storage for containers
volumes:
  postgres_data:
  elaticsearch_data:
  django_static:
